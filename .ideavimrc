let mapleader=" "

set clipboard=unnamed,unnamedplus
set clipboard+=ideaput
set ideajoin
set visualbell

set incsearch              " Highlight while searching with / or ?.
set hlsearch               " Keep matches highlighted.
set smartcase
set ignorecase

set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set nowrap
set showmode
set showcmd

set highlightedyank
set timeoutlen=5000         " increase the timeoutlen (default: 1000)

set number relativenumber  " relative line numbers

" keybindings
map <leader>c <action>(CommentByLineComment)
map <leader>ff <action>(GotoClass)
map <leader>fc <action>(FindInPath)
map <leader>fu <action>(FindUsages)
map <leader>fg <action>(Compare.LastVersion)
map <leader>fh <action>(CallHierarchy)
map <leader>h  <action>(ShowErrorDescription)
map <leader>u  <action>(CodeCompletion)
map <leader>k  <action>(ShowIntentionActions)
map <leader>s  <action>(FileStructurePopup)
map qq         <action>(CloseContent)
map <leader>r  <action>(Refactorings.QuickListPopupAction)
map <leader>i  <action>(Generate)
map <leader>db <action>(PreviousDiff) 
map <leader>df <action>(NextDiff)
map <leader>vv <action>(IntroduceVariable)
map <leader>ww <action>(SurroundWith)

" buffer switch
nnoremap <silent> H :bprevious<CR>
nnoremap <silent> L :bnext<CR>

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

nnoremap <c-d> <c-d>zz
nnoremap <c-u> <c-u>zz
nnoremap % %zz
nnoremap n nzzzv
nnoremap N Nzzzv

nnoremap ge :action GotoNextError<CR>
nnoremap gE :action GotoPreviousError<CR>
nnoremap gi :action GotoImplementation<CR>
nnoremap gD :action GotToDeclaration<CR>
nnoremap gs :action GotToSuperMethod<CR>
nnoremap gb :action Back<CR>
nnoremap gf :action Forward<CR>
nnoremap gr :action RecentFiles<CR>

nnoremap ,r :action ContextRun<CR>
nnoremap ,c :action RunClass<CR>
nnoremap ,u :action Rerun<CR>
nnoremap ,f :action RerunFailedTests<CR>
nnoremap ,b :action ToggleLineBreakpoint<CR>
nnoremap ,d :action ContextDebug<CR>
